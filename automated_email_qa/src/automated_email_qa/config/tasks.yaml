# Automated Email QA System - Task Configurations
# ================================================
# Following CrewAI standard format with template variables
# 
# Data Flow Through Tasks:
# 1. extract_requirements -> Parse document, extract all requirements
# 2. analyze_email_content -> Compare email against requirements
# 3. validate_links -> Check all links and CTAs
# 4. visual_inspection -> Analyze visual rendering
# 5. compliance_check -> Verify legal and brand compliance
# 6. generate_qa_report -> Compile comprehensive report
#
# Template Variables:
# - {document_content}: Raw copy document (str)
# - {email_content}: Raw email HTML/EML (str)
# - {client_name}: Client identifier (str)
# - {campaign_name}: Campaign identifier (str)
# - {rules}: JSON string of DynamicRulesEngine rules (str)
# - {brand_guidelines}: JSON string of brand rules (str)
# - {compliance_rules}: JSON string of compliance requirements (str)

extract_requirements:
  description: >
    Extract all requirements from the {document_type} copy document for {client_name}'s 
    {campaign_name} campaign. Parse the document to identify:
    - All subject line variations (including A/B test versions)
    - Preview/preheader text
    - From name and email address
    - All CTAs with their exact text and destination URLs
    - Required content modules and their specifications
    - Segment-specific requirements and variations
    - Any special instructions or notes
    
    Document content to analyze:
    {document_content}
    
    Ensure 100% extraction accuracy, handling any encoding issues. Look for both
    explicit requirements and implied expectations. Pay special attention to CTA
    formatting requirements based on brand guidelines.
  expected_output: >
    A comprehensive JSON structure containing all extracted requirements:
    {
      "subject_lines": ["Subject A", "Subject B"],
      "preview_text": "Preview text content",
      "from_name": "Sender Name",
      "from_email": "sender@domain.com",
      "ctas": [
        {"text": "CTA TEXT", "link": "https://destination.url", "location": "hero"}
      ],
      "links": ["https://link1.com", "https://link2.com"],
      "segments": {
        "segment_name": {"requirements": ["requirement1", "requirement2"]}
      },
      "content_modules": ["header", "hero", "product", "footer"],
      "special_notes": ["Note 1", "Note 2"],
      "encoding_issues_found": false
    }
  agent: document_extractor

analyze_email_content:
  description: >
    Analyze the {email_type} email for {client_name}'s {campaign_name} against 
    the extracted requirements. Perform comprehensive validation:
    - Verify subject line matches one of the required variations
    - Check preview text accuracy and placement
    - Validate all required content modules are present
    - Check for character encoding issues (apostrophes, quotes, special chars)
    - Verify segment-specific content if applicable
    - Identify any missing required elements
    - Flag any extra content not in requirements
    
    Email content to analyze:
    {email_content}
    
    Requirements to validate against:
    {requirements}
    
    Validation rules to apply:
    {rules}
    
    Apply the specified validation strictness from rules. Check CTA text casing
    against brand guidelines. Document all discrepancies with specific details.
  expected_output: >
    A detailed analysis report in JSON format:
    {
      "subject_line_check": {
        "passed": true/false,
        "email_subject": "Actual subject",
        "required_subjects": ["Required A", "Required B"],
        "match_details": "Exact match found" or "Mismatch details"
      },
      "preview_text_check": {
        "passed": true/false,
        "email_preview": "Actual preview",
        "required_preview": "Required preview",
        "match_details": "Match details"
      },
      "content_modules_check": {
        "passed": true/false,
        "required_modules": ["module1", "module2"],
        "found_modules": ["module1", "module2"],
        "missing_modules": [],
        "extra_modules": []
      },
      "encoding_issues": ["Issue 1", "Issue 2"],
      "cta_analysis": [
        {
          "required": {"text": "REQUIRED", "link": "url"},
          "found": true/false,
          "actual": {"text": "ACTUAL", "link": "url"}
        }
      ],
      "overall_score": 85.5,
      "critical_issues": ["Issue 1"],
      "warnings": ["Warning 1"]
    }
  agent: email_analyzer
  context: [extract_requirements]

validate_links:
  description: >
    Validate all links and CTAs in the {email_type} email for {client_name}'s
    {campaign_name} campaign. Comprehensive link validation includes:
    - Check all href attributes for correctness
    - Verify CTA text matches requirements exactly (including casing per brand rules)
    - Validate UTM parameters are present and correct
    - Check for broken links or redirect chains
    - Verify unsubscribe and preference center links
    - Ensure all required links are present
    - Flag any unauthorized or extra links
    
    Email HTML to validate:
    {email_content}
    
    Link requirements from extraction:
    {requirements}
    
    Brand CTA style rules:
    {rules}
  expected_output: >
    Comprehensive link validation report in JSON:
    {
      "total_links_found": 15,
      "required_links_count": 12,
      "matched_links": 11,
      "cta_validation": [
        {
          "required_text": "SHOP NOW",
          "required_url": "https://shop.com",
          "found": true,
          "actual_text": "SHOP NOW",
          "actual_url": "https://shop.com",
          "text_match": true,
          "url_match": true,
          "style_compliant": true
        }
      ],
      "missing_links": ["https://missing.com"],
      "extra_links": ["https://extra.com"],
      "utm_validation": {
        "all_links_have_utm": true,
        "missing_utm_params": [],
        "utm_source_values": ["email"],
        "utm_medium_values": ["campaign"],
        "utm_campaign_values": ["summer2024"]
      },
      "broken_links": [],
      "unsubscribe_present": true,
      "validation_passed": true
    }
  agent: link_validator
  context: [extract_requirements, analyze_email_content]

visual_inspection:
  description: >
    Perform visual inspection of the {email_type} email for {client_name} to
    ensure perfect rendering and brand compliance. Visual QA checks include:
    - Analyze email rendering for display issues
    - Verify brand compliance (colors, fonts, spacing, logos)
    - Check all images display correctly with proper alt text
    - Validate responsive design for mobile and desktop
    - Identify visual inconsistencies or rendering problems
    - Check for accessibility issues (contrast, font sizes)
    - Verify layout matches approved template
    
    Email HTML for visual analysis:
    {email_content}
    
    Brand visual guidelines:
    {brand_guidelines}
    
    Use multimodal capabilities to analyze screenshots if available.
  expected_output: >
    Visual inspection report in JSON format:
    {
      "visual_inspection_performed": true,
      "rendering_score": 92.5,
      "brand_compliance": {
        "colors_correct": true,
        "fonts_correct": true,
        "logo_placement": true,
        "spacing_consistent": true,
        "overall_compliant": true
      },
      "image_analysis": {
        "total_images": 5,
        "images_loading": 5,
        "images_with_alt_text": 5,
        "broken_images": []
      },
      "responsive_design": {
        "mobile_optimized": true,
        "desktop_optimized": true,
        "issues_found": []
      },
      "accessibility": {
        "color_contrast_adequate": true,
        "font_size_readable": true,
        "alt_text_present": true,
        "accessibility_score": 95
      },
      "visual_issues": [],
      "recommendations": []
    }
  agent: visual_inspector
  context: [analyze_email_content]

compliance_check:
  description: >
    Check {email_type} email for {client_name} against all compliance requirements
    and brand guidelines. Comprehensive compliance validation includes:
    - CAN-SPAM compliance (unsubscribe link, physical address, sender info)
    - GDPR compliance if applicable (consent, data rights)
    - Accessibility standards (WCAG guidelines)
    - Brand voice and tone consistency
    - Required legal disclaimers presence
    - Industry-specific regulations for {industry}
    - Copyright and trademark usage
    
    Email content to check:
    {email_content}
    
    Compliance requirements:
    {compliance_rules}
    
    Brand guidelines:
    {brand_guidelines}
  expected_output: >
    Compliance validation report in JSON:
    {
      "can_spam_compliance": {
        "passed": true,
        "unsubscribe_link_present": true,
        "unsubscribe_link_url": "https://unsubscribe.url",
        "physical_address_present": true,
        "physical_address": "123 Main St, City, State ZIP",
        "sender_identification": true,
        "subject_not_misleading": true
      },
      "gdpr_compliance": {
        "applicable": false,
        "passed": true,
        "details": {}
      },
      "accessibility_compliance": {
        "passed": true,
        "alt_text_coverage": "100%",
        "color_contrast_ratio": "4.5:1",
        "font_size_minimum": "14px",
        "issues": []
      },
      "brand_compliance": {
        "tone_appropriate": true,
        "messaging_on_brand": true,
        "required_disclaimers_present": true,
        "issues": []
      },
      "legal_requirements": {
        "all_disclaimers_present": true,
        "copyright_notice": true,
        "trademark_usage_correct": true
      },
      "overall_compliance_passed": true,
      "compliance_score": 98.5
    }
  agent: compliance_checker
  context: [analyze_email_content, validate_links]

generate_qa_report:
  description: >
    Compile comprehensive QA report for {client_name}'s {campaign_name} email campaign.
    Synthesize all findings from specialized agents into an actionable report that:
    - Provides executive summary with pass/fail verdict
    - Prioritizes issues by severity (Critical/High/Medium/Low)
    - Gives specific, actionable recommendations for each issue
    - Calculates overall QA score
    - Highlights what passed validation
    - Provides detailed findings from each check
    - Includes metrics and statistics
    
    All QA findings to compile:
    {all_findings}
    
    Create a report that is immediately actionable for both technical teams
    and business stakeholders, with clear next steps for any issues found.
  expected_output: >
    Comprehensive QA report in JSON format:
    {
      "campaign_info": {
        "client": "{client_name}",
        "campaign": "{campaign_name}",
        "email_type": "{email_type}",
        "validation_timestamp": "2024-01-01T12:00:00Z"
      },
      "executive_summary": "Email validation completed with 2 critical issues requiring immediate attention.",
      "pass_fail_verdict": "FAIL",
      "qa_score": 75.5,
      "critical_issues": [
        {
          "severity": "CRITICAL",
          "category": "Links",
          "description": "Primary CTA link broken",
          "recommendation": "Update CTA href to https://correct.url",
          "impact": "Users cannot complete purchase"
        }
      ],
      "high_priority_issues": [],
      "medium_priority_issues": [],
      "low_priority_issues": [],
      "passed_checks": [
        "Subject line matches requirements",
        "Preview text correct",
        "CAN-SPAM compliant",
        "Brand colors correct"
      ],
      "detailed_findings": {
        "requirements_extraction": {},
        "content_analysis": {},
        "link_validation": {},
        "visual_inspection": {},
        "compliance_check": {}
      },
      "metrics": {
        "total_checks_performed": 45,
        "checks_passed": 38,
        "checks_failed": 7,
        "links_validated": 15,
        "images_checked": 5,
        "processing_time_seconds": 12.5
      },
      "recommendations": [
        "1. Fix broken CTA link immediately",
        "2. Add missing alt text to hero image",
        "3. Review UTM parameters for consistency"
      ],
      "next_steps": "Address critical issues before deployment"
    }
  agent: qa_manager
  context: [extract_requirements, analyze_email_content, validate_links, visual_inspection, compliance_check]